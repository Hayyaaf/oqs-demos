# Multi-stage build: Build tools and dependencies in an intermediate image, then create a minimal runtime image.

# Define the base version of Alpine Linux
ARG ALPINE_VERSION=3.20

# Stage 1: Intermediate build image
FROM alpine:${ALPINE_VERSION} AS intermediate

# Define the base versions and tags for dependencies
ARG OPENSSLQUIC_TAG=openssl-3.1.7-quic1
ARG LIBOQS_TAG=0.11.0
ARG OQSPROVIDER_TAG=0.7.0
ARG NGHTTP3_TAG=v1.6.0
ARG NGTCP2_TAG=v1.5.0

# Define Installation directory
ARG INSTALLDIR=/opt/oqssa

# Installing build prerequisites
RUN apk update && apk --no-cache add \
    bash git pkgconfig autoconf automake \
    libtool g++ make cmake ninja libev-dev  \
    libevent-dev openssl-dev openssl linux-headers

# Clone sources for all dependencies
WORKDIR /opt
RUN git clone --depth 1 --branch ${LIBOQS_TAG} https://github.com/open-quantum-safe/liboqs && \
    git clone --depth 1 --branch ${OPENSSLQUIC_TAG} https://github.com/quictls/openssl.git && \
    git clone --depth 1 --branch ${OQSPROVIDER_TAG} https://github.com/open-quantum-safe/oqs-provider.git && \
    git clone --depth 1 --branch ${NGHTTP3_TAG}  https://github.com/ngtcp2/nghttp3 && \
    git clone --depth 1 --branch ${NGTCP2_TAG} https://github.com/ngtcp2/ngtcp2

# Build and install liboqs
WORKDIR /opt/liboqs/build
RUN cmake -GNinja -DCMAKE_INSTALL_PREFIX=${INSTALLDIR} .. && ninja && ninja install

# Build and install OpenSSL with QUIC support
WORKDIR /opt/openssl
RUN LDFLAGS="-Wl,-rpath -Wl,${INSTALLDIR}/lib64" ./config shared --prefix="${INSTALLDIR}" && \
    ninja -j"$(nproc)" && make install_sw install_ssldirs && \
    if [ -d "${INSTALLDIR}/lib64" ]; then ln -s "${INSTALLDIR}/lib64" "${INSTALLDIR}/lib"; fi && \
    if [ -d "${INSTALLDIR}/lib" ]; then ln -s "${INSTALLDIR}/lib" "${INSTALLDIR}/lib64"; fi

# Build, install, and activate oqs-provider
WORKDIR /opt/oqs-provider
RUN ln -s ../openssl . && \
    cmake -DOPENSSL_ROOT_DIR=${INSTALLDIR} -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=${INSTALLDIR} -S . -B _build && \
    cmake --build _build  && cp _build/lib/oqsprovider.so ${INSTALLDIR}/lib64/ossl-modules && \
    sed -i "s/default = default_sect/default = default_sect\noqsprovider = oqsprovider_sect/g" /opt/oqssa/ssl/openssl.cnf && \
    sed -i "s/\[default_sect\]/\[default_sect\]\nactivate = 1\n\[oqsprovider_sect\]\nactivate = 1\n/g" /opt/oqssa/ssl/openssl.cnf && \
    sed -i "s/providers = provider_sect/providers = provider_sect\nssl_conf = ssl_sect\n\n\[ssl_sect\]\nsystem_default = system_default_sect\n\n\[system_default_sect\]\nGroups = \$ENV\:\:KEM_ALG\n/g" /opt/oqssa/ssl/openssl.cnf && \
    sed -i "s/\# Use this in order to automatically load providers/\# Set default KEM alg if not set via environment variable\nKEM_ALG = kyber512\n\n# Use this in order to automatically load providers/g" /opt/oqssa/ssl/openssl.cnf

# Build and install nghttp3 (HTTP/3 library)
WORKDIR /opt/nghttp3
RUN git submodule update --init && \
    autoreconf -i && \
    ./configure --prefix="$PWD/build" --enable-lib-only && \
    make -j"$(nproc)" check && make install

# Build and install ngtcp2 (QUIC protocol library)
WORKDIR /opt/ngtcp2
RUN autoreconf -i && \
    ./configure PKG_CONFIG_PATH="$PWD/../nghttp3/build/lib/pkgconfig:/opt/oqssa/lib64/pkgconfig" \
    CXX="g++" CXXFLAGS="-std=c++20" && \
    make -j"$(nproc)" && make install

# Copy required libraries to a single directory
WORKDIR /opt/lib
RUN cp /opt/ngtcp2/lib/.libs/libngtcp2.so.* . && \
    cp /usr/lib/libev.so.* . && \
    cp /opt/nghttp3/build/lib/libnghttp3.so.* . && \
    cp /opt/ngtcp2/crypto/quictls/.libs/libngtcp2_crypto_quictls.so.* . && \
    cp /opt/oqssa/lib64/libssl.so.* . && \
    cp /opt/oqssa/lib64/libcrypto.so.* . && \
    cp /usr/lib/libstdc++.so.* . && \
    cp /usr/lib/libgcc_s.so.* .

# Stage 2: Minimal runtime image
FROM alpine:${ALPINE_VERSION} AS runtime

# Copy the client executable, libraries, and configuration files
COPY --from=intermediate /opt/ngtcp2/examples/qtlsclient /usr/local/bin
COPY --from=intermediate /opt/lib /usr/local/lib
COPY --from=intermediate /opt/oqssa/lib64/ossl-modules/oqsprovider.so /opt/oqssa/lib64/ossl-modules/oqsprovider.so
COPY --from=intermediate /opt/oqssa/ssl/openssl.cnf /opt/oqssa/ssl/openssl.cnf

# Create compatibility symlink for libraries
RUN ln -s /opt/oqssa/lib64 /opt/oqssa/lib
